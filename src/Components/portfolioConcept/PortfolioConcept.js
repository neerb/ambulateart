import React, { useState, useEffect, useRef, useMemo } from 'react';
import Spline from '@splinetool/react-spline';
import './PortfolioConcept.css';
import $ from "jquery";
import { motion } from 'framer-motion';
import SeraphimBumper from './Seraphim/SeraphimBumper'

import esse from './shapes/esse.png'
import evalink from './shapes/evalink.png'
import greencube from './shapes/greencube.png'
import moo from './shapes/moo.png'
import noodlefan from './shapes/noodlefan.png'
import orangebubble from './shapes/orangebubble.png'
import plusorange from './shapes/plusorange.png'
import purplegon from './shapes/purplegon.png'
import redflower from './shapes/redflower.png'
import tess from './shapes/tess.png'
import triangle3d from './shapes/triangle3d.png'
import trigems from './shapes/trigems.png'
import triround from './shapes/triround.png'


import esseSound from "./shapes/sounds/boop1.wav"
import evalinkSound from "./shapes/sounds/boop2.wav"
import greencubeSound from './shapes/sounds/boop3.wav';


// import ballring from './shapes/ballring.png';
// import ballringSound from './shapes/sounds/ballringSound.wav';
// import greencube from './shapes/greencube.png';
// import greencubeSound from './shapes/sounds/greencubeSound.wav';
// import moo from './shapes/moo.png';
// import mooSound from './shapes/sounds/mooSound.wav';
// import noodlefan from './shapes/noodlefan.png';
// import noodlefanSound from './shapes/sounds/noodlefanSound.wav';
// import orangebubble from './shapes/orangebubble.png';
// import orangebubbleSound from './shapes/sounds/orangebubbleSound.wav';
// import plusorange from './shapes/plusorange.png';
// import plusorangeSound from './shapes/sounds/plusorangeSound.wav';
// import purplegon from './shapes/purplegon.png';
// import purplegonSound from './shapes/sounds/purplegonSound.wav';
// import redflower from './shapes/redflower.png';
// import redflowerSound from './shapes/sounds/redflowerSound.wav';
// import tess from './shapes/tess.png';
// import tessSound from './shapes/sounds/tessSound.wav';
// import triangle3d from './shapes/triangle3d.png';
// import triangle3dSound from './shapes/sounds/triangle3dSound.wav';
// import trifector from './shapes/trifector.png';
// import trifectorSound from './shapes/sounds/trifectorSound.wav';
// import trigems from './shapes/trigems.png';
// import trigemsSound from './shapes/sounds/trigemsSound.wav';
// import triplepyramid from './shapes/triplepyramid.png';
// import triplepyramidSound from './shapes/sounds/triplepyramidSound.wav';
// import triround from './shapes/triround.png';
// import triroundSound from './shapes/sounds/triroundSound.wav';
// import yinyang from './shapes/yinyang.png';
// import yinyangSound from './shapes/sounds/yinyangSound.wav';


// import { createRoot } from 'react-dom/client'
// import { Canvas, useFrame } from '@react-three/fiber'
// import { act } from 'react-dom/test-utils';

/*
  Auto-generated by Spline
*/

const datas = [
  {
    title: "esse",
    imgSrc: esse,
    audioSrc: esseSound
  },
  {
    title: "evalink",
    imgSrc: evalink,
    audioSrc: evalinkSound
  },
  {
    title: "greencube",
    imgSrc: greencube,
    audioSrc: greencubeSound
  },
  // {
  //   title: "ballring",
  //   imgSrc: ballring,
  //   audioSrc: ballringSound
  // },
  // {
  //   title: "moo",
  //   imgSrc: moo,
  //   audioSrc: mooSound
  // },
  // {
  //   title: "noodlefan",
  //   imgSrc: noodlefan,
  //   audioSrc: noodlefanSound
  // },
  // {
  //   title: "orangebubble",
  //   imgSrc: orangebubble,
  //   audioSrc: orangebubbleSound
  // },
  // {
  //   title: "plusorange",
  //   imgSrc: plusorange,
  //   audioSrc: plusorangeSound
  // },
  // {
  //   title: "purplegon",
  //   imgSrc: purplegon,
  //   audioSrc: purplegonSound
  // },
  // {
  //   title: "redflower",
  //   imgSrc: redflower,
  //   audioSrc: redflowerSound
  // },
  // {
  //   title: "tess",
  //   imgSrc: tess,
  //   audioSrc: tessSound
  // },
  // {
  //   title: "triangle3d",
  //   imgSrc: triangle3d,
  //   audioSrc: triangle3dSound
  // },
  // {
  //   title: "trifector",
  //   imgSrc: trifector,
  //   audioSrc: trifectorSound
  // },
  // {
  //   title: "trigems",
  //   imgSrc: trigems,
  //   audioSrc: trigemsSound
  // },
  // {
  //   title: "triplepyramid",
  //   imgSrc: triplepyramid,
  //   audioSrc: triplepyramidSound
  // },
  // {
  //   title: "triround",
  //   imgSrc: triround,
  //   audioSrc: triroundSound
  // },
  // {
  //   title: "yinyang",
  //   imgSrc: yinyang,
  //   audioSrc: yinyangSound
  // }
];

const TileCard = (props) => {
  const [active, setActive] = useState(false);

  const cardClicked = (e) => {
    props.passFunc(props.src);
    setActive(!active)
  }

  const cardHovered = (e) => {
    var audio = $("#" + props.title + "sound")[0];
    audio.play();
  }

  const cardLeaveHover = (e) => {
    var audio = $("#" + props.title + "sound")[0];
    audio.pause();
    audio.currentTime = 0;
  }
  return (
    <div className={'card-wrap ' + (active ? 'filter-none' : '')} onClick={cardClicked} onMouseEnter={cardHovered} onMouseLeave={cardLeaveHover}>
      <input className='checkbox-card' type="checkbox" checked={active ? "checked" : ""} />
      <audio id={props.title + "sound"} src={props.audioSrc}></audio>

      <div className='card-data'>
        <img className='img-hover' src={props.src}></img>
      </div>

      <div className='card-title'>
        {props.title}
      </div>
    </div>
  )
}


const PortfolioConcept = () => {
  const [selectedCard, setSelectedCard] = useState(null);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const container = document.querySelector('.App');
      const containerPedestal = document.querySelector('#pedestalimg');
      const layers = document.querySelectorAll('.dotted-bg');
      const hoverItem = document.querySelector('#active-item-hover');
      // layers.push(document.querySelector('.canvas3d'));

      let mouseX = 0;
      let mouseY = 0;
      let mouseXP = 0;
      let mouseYP = 0;
      let speedX = 0.5;
      let speedY = 0.5;
      let isMoving = false;
      let isMovingP = false;

      container.addEventListener('mousemove', (e) => {
        mouseX = e.clientX / window.innerWidth - 0.5;
        mouseY = e.clientY / window.innerHeight - 0.5;
        isMoving = true;
      });

      if (containerPedestal)
        containerPedestal.addEventListener('mousemove', (e) => {
          mouseXP = e.clientX / window.innerWidth - 0.5;
          mouseYP = e.clientY / window.innerHeight - 0.5;
          isMovingP = true;
        });

      function updateParallax() {
        if (container && containerPedestal)
          layers.forEach((layer, index) => {
            const speed = index === 0 ? speedX : speedY;
            const offsetX = -mouseX * speed * (index + 1) * 100;
            const offsetY = -mouseY * speed * (index + 1) * 100;
            const rotationX = mouseY * 10 * (index + 1); // Adjust the rotational effect
            const rotationY = mouseX * 10 * (index + 1); // Adjust the rotational effect

            const offsetXP = -mouseXP * speed * (index + 1) * 100;
            const offsetYP = -mouseYP * speed * (index + 1) * 100;
            const rotationXP = mouseYP * 70 * (index + 1); // Adjust the rotational effect
            const rotationYP = mouseXP * 70 * (index + 1); // Adjust the rotational effect

            if (isMoving) {
              layer.style.transition = 'transform 0.3s ease-out'; // Add a smooth transition
            } else {
              layer.style.transition = 'transform 0.3s ease-out'; // You can adjust the transition properties accordingly
            }

            // if (isMovingP) {
            //   // hoverItem.style.transition = 'transform 0.3s ease-out'; // Add a smooth transition
            // } else {
            //   // hoverItem.style.transition = 'transform 0.3s ease-out'; // You can adjust the transition properties accordingly
            // }

            layer.style.transform = `translate(${offsetX}px, ${offsetY}px) rotateX(${rotationX}deg) rotateY(${rotationY}deg)`;
            hoverItem.style.transform = `rotateX(${rotationXP}deg) rotateY(${rotationYP}deg)`;
          });

        isMoving = false;
        isMovingP = false;

        requestAnimationFrame(updateParallax);
      }

      updateParallax();
    }
  }, []);

  const selectCardFunc = (src) => {
    setSelectedCard(src);
  }

  return (
    <div className="concept-app">
      {/* <div className='footer'>
        <div className="marquee-inner">
          <span className="marquee-left">{"BROUGHT TO YOU BY"}</span>
          <span className="marquee-left">{""}</span>
        </div>
      </div> */}
      <motion.div className='wrapper-border'
        initial={{ outlineOffset: 0, border: "none", opacity: 0 }}
        animate={{ outlineOffset: "-45px", border: "40px solid black", opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 3 }}
      >
        <div className='testitle'>{"--->"} Trophy Throwing Competition {"<---"}</div>

        {/* <div className="marquee-inner">
          <span className="marquee-left">{"gaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}</span>
          <span className="marquee-left">{""}</span>
        </div>

        <div className="marquee-inner">
          <span className="marquee-right">{""}</span>
          <span className="marquee-right">{""}</span>
        </div> */}
      </motion.div>

      <div className="dotted-bg">
      </div>

      <motion.div id='canvas3d' className='canvas-container'
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 7 }}
      >
        <Spline scene="https://prod.spline.design/RYHnZd1uMtl6xEjG/scene.splinecode" />
      </motion.div>

      <div className='main-section-wrap'>
        <motion.div className='tiles-wrapper'
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 1 }}
        >
          <div className='tiles'>
            {
              datas.map((data) => {
                return <TileCard title={data.title} src={data.imgSrc} audioSrc={data.audioSrc} passFunc={selectCardFunc} />
              })
            }
            {/* <TileCard title={datas[0].title} src={datas[0].imgSrc} audioSrc={datas[0].audioSrc} passFunc={selectCardFunc} />
            <TileCard title="evalink" src={evalink} name={"evalink"} passFunc={selectCardFunc} />
            <TileCard title="greencube" src={greencube} passFunc={selectCardFunc} />
            <TileCard title="moo" src={moo} passFunc={selectCardFunc} />
            <TileCard title="noodlefan" src={noodlefan} passFunc={selectCardFunc} />
            <TileCard title="orangebubble" src={orangebubble} passFunc={selectCardFunc} />
            <TileCard title="plusorange" src={plusorange} passFunc={selectCardFunc} />
            <TileCard title="purplegon" src={purplegon} passFunc={selectCardFunc} />
            <TileCard title="redflower" src={redflower} passFunc={selectCardFunc} />
            <TileCard title="tess" src={tess} passFunc={selectCardFunc} />
            <TileCard title="triangle3d" src={triangle3d} passFunc={selectCardFunc} />
            <TileCard title="trigems" src={trigems} passFunc={selectCardFunc} />
            <TileCard title="triround" src={triround} passFunc={selectCardFunc} /> */}
          </div>
        </motion.div>

        <div className='viewing-pedestal'>
          <motion.div className="marquee-inner"
            initial={{ x: "100%" }}
            animate={{ x: 0 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 3 }}
          >
            <span className="marquee-left">{selectedCard ? selectedCard : "<-- SELECT <-- SELECT <-- SELECT"}</span>
            <span className="marquee-left">{selectedCard ? selectedCard : "<-- SELECT <-- SELECT <-- SELECT"}</span>
          </motion.div>
          <motion.div
            className='green-frostglass'
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 1 }}
          >
            <div id='pedestalimg' className='active-card-data'>
              <img id="active-item-hover" className='active-img-hover' src={selectedCard}></img>
            </div>
          </motion.div>
        </div>
      </div>

      {/* <div className='tools'>
        <div className='toolbar-item'>
        this one
        </div>
        
        <div className='toolbar-item'>
        that one
        </div>
        
        <div className='toolbar-item'>
          they one
        </div>
      </div> */}


    </div>
  );
}

export default PortfolioConcept;
